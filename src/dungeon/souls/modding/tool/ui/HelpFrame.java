/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dungeon.souls.modding.tool.ui;

import dungeon.souls.modding.tool.model.generic.EditorConfig;
import dungeon.souls.modding.tool.utils.Utilities;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.application.Platform;
import javafx.embed.swing.JFXPanel;
import javafx.scene.Scene;
import javafx.scene.web.WebView;

/**
 *
 * @author Diogo
 */
public class HelpFrame extends javax.swing.JFrame
{

    /**
     * Creates new form HelpFrame
     */
    public HelpFrame()
    {
        initComponents();
        JFXPanel jfxPanel = new JFXPanel(); // Scrollable JCompenent
        initPages();
        helpPane.setViewportView(jfxPanel);
        Platform.runLater( () -> { // FX components need to be managed by JavaFX
           WebView webView = new WebView();
           File file = new File("./Help/help.html");
           webView.getEngine().load(file.toURI().toString());
           jfxPanel.setScene( new Scene( webView ) );
        });
    }

    /**
     * Initializes the pages.
     */
    private void initPages()
    {
        try
        {
            File baseDir = new File("Help");
            String[] fileNames = {"help.html","help_functions.html","help_modules.html","help_steam_workshop.html",
            "help_sprites.html","help_items.html","help_contact.html","help_onboarding.html"};
            List<String> functions = getNativeFunctions();
            List<String> names = new LinkedList<>();
            
            EditorConfig config = EditorConfig.getInstance();
            boolean replace = config.getDocumentationVersion()<EditorConfig.DOCUMENTATION_VERSION;
            if (replace)
            {
                config.setDocumentationVersion(EditorConfig.DOCUMENTATION_VERSION);
            }
            String functionLinkCode = ""; //The code to replace the links to the functions.
            names.addAll(Arrays.asList(fileNames));
            String temp,linkTemp;
            Collections.sort(functions);
            for (String elem:functions)
            {
                temp=elem.replaceAll("\\(.*\\)", "");
                linkTemp = "help_"+temp+".html";
                names.add(linkTemp);
                functionLinkCode+="<a class=\"w3-bar-item w3-button w3-hover-black\" href=\"./"+linkTemp+"\">"+temp+"</a>\n";
            }
            
            if (replace)
            {
                for (String element:names)
                {
                    InputStream stream = EditorMain.class.getClassLoader().getResourceAsStream("dungeon/souls/modding/tool/resources/"+element);
                    if (stream!=null)
                    {
                        File extract = Utilities.extractPackagedFile(baseDir, 
                                stream, element, replace);
                        String source = Utilities.fileAsString(extract);
                        source=source.replace("<!--!!FUNCTION_LINKS!!-->",functionLinkCode);
                        FileOutputStream fos = new FileOutputStream(extract);
                        fos.write(source.getBytes());
                        fos.close();
                    }
                }
            }
            
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
    }
    
    /**
     * Fetches the native functions of the editor.
     * @return 
     */
    private List<String> getNativeFunctions()
    {
        List<String> result = new LinkedList<>();
        try
        {
            String data = Utilities.inputStreamAsString(EditorMain.class.getClassLoader().getResourceAsStream("dungeon/souls/modding/tool/resources/DungeonSoulsGameFunctions.txt"));
            for (String line:data.split("\n"))
            {
                result.add(line);
            }
        }
        catch (IOException ex)
        {
            Logger.getLogger(JCodePane.class.getName()).log(Level.SEVERE, null, ex);
        }
        return result;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        helpPane = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(helpPane, javax.swing.GroupLayout.DEFAULT_SIZE, 855, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(helpPane, javax.swing.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane helpPane;
    // End of variables declaration//GEN-END:variables
}
